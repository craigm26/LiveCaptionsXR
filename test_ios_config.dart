// Test script to verify iOS configuration for TestFlight builds
import 'dart:io';

void main() {
  print('üîç Testing iOS Configuration for TestFlight Build Issues');

  // Check iOS deployment target consistency
  print('\nüì± Checking iOS deployment target consistency:');

  // Check AppFrameworkInfo.plist
  final appFrameworkInfo = File('ios/Flutter/AppFrameworkInfo.plist');
  if (appFrameworkInfo.existsSync()) {
    final content = appFrameworkInfo.readAsStringSync();
    if (content.contains('<string>14.0</string>')) {
      print('‚úÖ AppFrameworkInfo.plist: iOS 14.0 ‚úì');
    } else {
      print('‚ùå AppFrameworkInfo.plist: iOS version mismatch');
    }
  } else {
    print('‚ùå AppFrameworkInfo.plist: File not found');
  }

  // Check Podfile
  final podfile = File('ios/Podfile');
  if (podfile.existsSync()) {
    final content = podfile.readAsStringSync();
    if (content.contains("platform :ios, '14.0'")) {
      print('‚úÖ Podfile: iOS 14.0 ‚úì');
    } else {
      print('‚ùå Podfile: iOS version mismatch');
    }
  } else {
    print('‚ùå Podfile: File not found');
  }

  // Check Package.swift
  final packageSwift = File('ios/Package.swift');
  if (packageSwift.existsSync()) {
    final content = packageSwift.readAsStringSync();
    if (content.contains('.iOS(.v14)')) {
      print('‚úÖ Package.swift: iOS 14.0 ‚úì');
    } else {
      print('‚ùå Package.swift: iOS version mismatch');
    }
  } else {
    print('‚ùå Package.swift: File not found');
  }

  // Check Info.plist for required capabilities
  print('\nüîê Checking Info.plist requirements:');
  final infoPlist = File('ios/Runner/Info.plist');
  if (infoPlist.existsSync()) {
    final content = infoPlist.readAsStringSync();

    // Check ARKit capability (should be removed for visionOS support)
    if (content.contains('<string>arkit</string>')) {
      print(
          '‚ö†Ô∏è Info.plist: ARKit capability present (may prevent visionOS support)');
    } else {
      print(
          '‚úÖ Info.plist: ARKit capability properly removed for visionOS support ‚úì');
    }

    // Check permissions
    final permissions = [
      'NSCameraUsageDescription',
      'NSMicrophoneUsageDescription',
      'NSSpeechRecognitionUsageDescription'
    ];

    for (final permission in permissions) {
      if (content.contains(permission)) {
        print('‚úÖ Info.plist: $permission ‚úì');
      } else {
        print('‚ùå Info.plist: $permission missing');
      }
    }
  } else {
    print('‚ùå Info.plist: File not found');
  }

  // Check assets
  print('\nüìÅ Checking assets:');
  final assetsDir = Directory('assets');
  if (assetsDir.existsSync()) {
    final modelsDir = Directory('assets/models');
    if (modelsDir.existsSync()) {
      print('‚úÖ Assets: models directory exists ‚úì');
    } else {
      print('‚ö†Ô∏è  Assets: models directory created');
    }

    final logosDir = Directory('assets/logos');
    if (logosDir.existsSync()) {
      print('‚úÖ Assets: logos directory exists ‚úì');
    } else {
      print('‚ùå Assets: logos directory missing');
    }
  } else {
    print('‚ùå Assets: Directory not found');
  }

  print('\nüéØ Configuration check complete!');
  print(
      'If all items show ‚úÖ, the configuration should work for TestFlight builds.');
}
