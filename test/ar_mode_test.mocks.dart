// Mocks generated by Mockito 5.4.6 from annotations
// in live_captions_xr/test/ar_mode_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:live_captions_xr/core/models/sound_event.dart' as _i13;
import 'package:live_captions_xr/core/models/visual_object.dart' as _i14;
import 'package:live_captions_xr/core/services/contextual_enhancer.dart' as _i3;
import 'package:live_captions_xr/core/services/hybrid_localization_engine.dart'
    as _i2;
import 'package:live_captions_xr/features/home/cubit/home_cubit.dart' as _i9;
import 'package:live_captions_xr/features/live_captions/cubit/live_captions_cubit.dart'
    as _i10;
import 'package:live_captions_xr/features/live_captions/cubit/live_captions_state.dart'
    as _i4;
import 'package:live_captions_xr/features/localization/cubit/localization_cubit.dart'
    as _i6;
import 'package:live_captions_xr/features/settings/cubit/settings_cubit.dart'
    as _i8;
import 'package:live_captions_xr/features/sound_detection/cubit/sound_detection_cubit.dart'
    as _i5;
import 'package:live_captions_xr/features/visual_identification/cubit/visual_identification_cubit.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHybridLocalizationEngine_0 extends _i1.SmartFake
    implements _i2.HybridLocalizationEngine {
  _FakeHybridLocalizationEngine_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContextualEnhancer_1 extends _i1.SmartFake
    implements _i3.ContextualEnhancer {
  _FakeContextualEnhancer_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLiveCaptionsState_2 extends _i1.SmartFake
    implements _i4.LiveCaptionsState {
  _FakeLiveCaptionsState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSoundDetectionState_3 extends _i1.SmartFake
    implements _i5.SoundDetectionState {
  _FakeSoundDetectionState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalizationState_4 extends _i1.SmartFake
    implements _i6.LocalizationState {
  _FakeLocalizationState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisualIdentificationState_5 extends _i1.SmartFake
    implements _i7.VisualIdentificationState {
  _FakeVisualIdentificationState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsState_6 extends _i1.SmartFake implements _i8.SettingsState {
  _FakeSettingsState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_7 extends _i1.SmartFake implements _i9.HomeState {
  _FakeHomeState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LiveCaptionsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiveCaptionsCubit extends _i1.Mock implements _i10.LiveCaptionsCubit {
  @override
  _i2.HybridLocalizationEngine get hybridLocalizationEngine =>
      (super.noSuchMethod(
        Invocation.getter(#hybridLocalizationEngine),
        returnValue: _FakeHybridLocalizationEngine_0(
          this,
          Invocation.getter(#hybridLocalizationEngine),
        ),
        returnValueForMissingStub: _FakeHybridLocalizationEngine_0(
          this,
          Invocation.getter(#hybridLocalizationEngine),
        ),
      ) as _i2.HybridLocalizationEngine);

  @override
  _i3.ContextualEnhancer get contextualEnhancer => (super.noSuchMethod(
        Invocation.getter(#contextualEnhancer),
        returnValue: _FakeContextualEnhancer_1(
          this,
          Invocation.getter(#contextualEnhancer),
        ),
        returnValueForMissingStub: _FakeContextualEnhancer_1(
          this,
          Invocation.getter(#contextualEnhancer),
        ),
      ) as _i3.ContextualEnhancer);

  @override
  _i4.LiveCaptionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLiveCaptionsState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLiveCaptionsState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.LiveCaptionsState);

  @override
  _i11.Stream<_i4.LiveCaptionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i4.LiveCaptionsState>.empty(),
        returnValueForMissingStub: _i11.Stream<_i4.LiveCaptionsState>.empty(),
      ) as _i11.Stream<_i4.LiveCaptionsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  get isActive => null;

  @override
  _i11.Future<void> startCaptions() => (super.noSuchMethod(
        Invocation.method(
          #startCaptions,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> stopCaptions() => (super.noSuchMethod(
        Invocation.method(
          #stopCaptions,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void emit(_i4.LiveCaptionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i4.LiveCaptionsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SoundDetectionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundDetectionCubit extends _i1.Mock
    implements _i5.SoundDetectionCubit {
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.SoundDetectionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSoundDetectionState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSoundDetectionState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.SoundDetectionState);

  @override
  _i11.Stream<_i5.SoundDetectionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i5.SoundDetectionState>.empty(),
        returnValueForMissingStub: _i11.Stream<_i5.SoundDetectionState>.empty(),
      ) as _i11.Stream<_i5.SoundDetectionState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void detectSound(_i13.SoundEvent? event) => super.noSuchMethod(
        Invocation.method(
          #detectSound,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.SoundDetectionState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i5.SoundDetectionState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [LocalizationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationCubit extends _i1.Mock implements _i6.LocalizationCubit {
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.LocalizationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocalizationState_4(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLocalizationState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.LocalizationState);

  @override
  _i11.Stream<_i6.LocalizationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i6.LocalizationState>.empty(),
        returnValueForMissingStub: _i11.Stream<_i6.LocalizationState>.empty(),
      ) as _i11.Stream<_i6.LocalizationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void localize(
    String? direction,
    double? confidence,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #localize,
          [
            direction,
            confidence,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.LocalizationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i6.LocalizationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [VisualIdentificationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisualIdentificationCubit extends _i1.Mock
    implements _i7.VisualIdentificationCubit {
  @override
  _i2.HybridLocalizationEngine get hybridLocalizationEngine =>
      (super.noSuchMethod(
        Invocation.getter(#hybridLocalizationEngine),
        returnValue: _FakeHybridLocalizationEngine_0(
          this,
          Invocation.getter(#hybridLocalizationEngine),
        ),
        returnValueForMissingStub: _FakeHybridLocalizationEngine_0(
          this,
          Invocation.getter(#hybridLocalizationEngine),
        ),
      ) as _i2.HybridLocalizationEngine);

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.VisualIdentificationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeVisualIdentificationState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeVisualIdentificationState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.VisualIdentificationState);

  @override
  _i11.Stream<_i7.VisualIdentificationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i7.VisualIdentificationState>.empty(),
        returnValueForMissingStub:
            _i11.Stream<_i7.VisualIdentificationState>.empty(),
      ) as _i11.Stream<_i7.VisualIdentificationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void detectObjects(List<_i14.VisualObject>? objects) => super.noSuchMethod(
        Invocation.method(
          #detectObjects,
          [objects],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.VisualIdentificationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i7.VisualIdentificationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [SettingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsCubit extends _i1.Mock implements _i8.SettingsCubit {
  @override
  _i8.SettingsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSettingsState_6(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSettingsState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.SettingsState);

  @override
  _i11.Stream<_i8.SettingsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i8.SettingsState>.empty(),
        returnValueForMissingStub: _i11.Stream<_i8.SettingsState>.empty(),
      ) as _i11.Stream<_i8.SettingsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i11.Future<void> toggleDebugLogging() => (super.noSuchMethod(
        Invocation.method(
          #toggleDebugLogging,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> toggleNotifications() => (super.noSuchMethod(
        Invocation.method(
          #toggleNotifications,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> toggleHaptics() => (super.noSuchMethod(
        Invocation.method(
          #toggleHaptics,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateTextSize(double? size) => (super.noSuchMethod(
        Invocation.method(
          #updateTextSize,
          [size],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateLanguage(String? language) => (super.noSuchMethod(
        Invocation.method(
          #updateLanguage,
          [language],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> resetSettings() => (super.noSuchMethod(
        Invocation.method(
          #resetSettings,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void emit(_i8.SettingsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i8.SettingsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i9.HomeCubit {
  @override
  _i9.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_7(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeHomeState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.HomeState);

  @override
  _i11.Stream<_i9.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i9.HomeState>.empty(),
        returnValueForMissingStub: _i11.Stream<_i9.HomeState>.empty(),
      ) as _i11.Stream<_i9.HomeState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void toggleArMode() => super.noSuchMethod(
        Invocation.method(
          #toggleArMode,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> updateWithAudioMeasurement({
    required double? angle,
    required double? confidence,
    required List<double>? deviceTransform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWithAudioMeasurement,
          [],
          {
            #angle: angle,
            #confidence: confidence,
            #deviceTransform: deviceTransform,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateWithVisualMeasurement({
    required List<double>? transform,
    required double? confidence,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWithVisualMeasurement,
          [],
          {
            #transform: transform,
            #confidence: confidence,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<double>> getFusedTransform() => (super.noSuchMethod(
        Invocation.method(
          #getFusedTransform,
          [],
        ),
        returnValue: _i11.Future<List<double>>.value(<double>[]),
        returnValueForMissingStub: _i11.Future<List<double>>.value(<double>[]),
      ) as _i11.Future<List<double>>);

  @override
  void emit(_i9.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i9.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}
